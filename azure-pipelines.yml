# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

steps:
  - task: TerraformInstaller@1
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTaskV4@4
    displayName: 'terraform init'
    inputs:
      provider: 'aws'
      command: 'init'
      commandOptions: '-input=false'

      # aws
      backendServiceAWS: 'dysonic-terraform-aws'
      # s3 bucket name, optional if provided elsewhere (i.e. inside terraform template or command options)
      backendAWSBucketName: 'dysonic-devops'
      # s3 path to state file, optional if provided elsewhere (i.e. inside terraform template or command options)
      backendAWSKey: 'tx-data-api.tfstate'

      # azurerm
      # backendServiceArm: 'dysonic-azurerm'
      # backendAzureRmResourceGroupName: 'dysonic-devops'
      # backendAzureRmStorageAccountName: 'dysonic'
      # backendAzureRmContainerName: 'tfstate'
      # backendAzureRmKey: 'tx-data-api.terraform.tfstate'

  - task: TerraformTaskV4@4
    displayName: 'terraform plan'
    env:
      TF_VAR_db_password: $(DB_PASSWORD)
    inputs:
      provider: 'aws'
      command: 'plan'
      commandOptions: '-input=false -out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode'
      # environmentServiceNameAzureRM: 'dysonic-azurerm'
      environmentServiceNameAWS: 'dysonic-terraform-aws'

  - task: TerraformTaskV4@4
    displayName: 'terraform apply'
    condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
    inputs:
      provider: 'aws'
      command: 'apply'
      commandOptions: '-input=false $(System.DefaultWorkingDirectory)/terraform.tfplan'
      # environmentServiceNameAzureRM: 'dysonic-azurerm'
      environmentServiceNameAWS: 'dysonic-terraform-aws'
