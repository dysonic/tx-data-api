# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

steps:
  - task: TerraformInstaller@1
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTaskV4@4
    displayName: 'terraform init'
    inputs:
      provider: 'azurerm'
      command: 'init'

      # aws
      # service connection name, required if backendType = aws
      # backendServiceAWS:
      #   'dysonic-terraform-aws'
      # s3 bucket name, optional if provided elsewhere (i.e. inside terraform template or command options)
      # backendAWSBucketName: 'dysonic-terraform-dev'
      # s3 path to state file, optional if provided elsewhere (i.e. inside terraform template or command options)
      # backendAWSKey: 'tx-data-api/terraform-state'

      # azurerm
      backendServiceArm: 'dysonic-azurerm'
      backendAzureRmResourceGroupName: 'dysonic-devops'
      backendAzureRmStorageAccountName: 'dysonic'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: 'tx-data-api.terraform.tfstate'

  - task: TerraformTaskV4@4
    displayName: 'terraform plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: 'dysonic-azurerm'
